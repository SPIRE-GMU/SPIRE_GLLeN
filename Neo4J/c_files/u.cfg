
;; Function u (u, funcdef_no=0, decl_uid=1946, cgraph_uid=1, symbol_order=0)

Removing basic block 7
Removing basic block 16
Removing basic block 24
;; 7 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
;;
;; Loop 6
;;  header 14, latch 13
;;  depth 1, outer 0
;;  nodes: 14 13
;;
;; Loop 5
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 4
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8
;;
;; Loop 3
;;  header 27, latch 26
;;  depth 1, outer 0
;;  nodes: 27 26
;;
;; Loop 2
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18
;;
;; Loop 1
;;  header 24, latch 23
;;  depth 1, outer 0
;;  nodes: 24 23
;; 2 succs { 3 15 }
;; 3 succs { 4 7 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 12 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 8 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 13 28 }
;; 15 succs { 16 28 }
;; 16 succs { 17 22 }
;; 17 succs { 19 }
;; 18 succs { 19 }
;; 19 succs { 18 20 }
;; 20 succs { 21 25 }
;; 21 succs { 25 }
;; 22 succs { 24 }
;; 23 succs { 24 }
;; 24 succs { 23 25 }
;; 25 succs { 27 }
;; 26 succs { 27 }
;; 27 succs { 26 28 }
;; 28 succs { 1 }
void u (int * size, double u0, double u1, const double du)
{
  double quant;

  <bb 2> :
  quant = 0.0;
  if (u0 < u1)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  if (u0 >= 0.0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  goto <bb 6>; [INV]

  <bb 5> :
  quant = quant + du;

  <bb 6> :
  if (quant <= u0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  goto <bb 9>; [INV]

  <bb 8> :
  quant = quant - du;

  <bb 9> :
  _1 = u0 + du;
  if (quant >= _1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (u0 == quant)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  quant = quant + du;

  <bb 12> :
  goto <bb 14>; [INV]

  <bb 13> :
  _2 = *size;
  _3 = _2 + 1;
  *size = _3;
  quant = quant + du;

  <bb 14> :
  if (quant < u1)
    goto <bb 13>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 15> :
  if (u0 > u1)
    goto <bb 16>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 16> :
  if (u0 > 0.0)
    goto <bb 17>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 17> :
  goto <bb 19>; [INV]

  <bb 18> :
  quant = quant + du;

  <bb 19> :
  _4 = u0 - du;
  if (quant <= _4)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  if (u0 == quant)
    goto <bb 21>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 21> :
  quant = quant - du;
  goto <bb 25>; [INV]

  <bb 22> :
  goto <bb 24>; [INV]

  <bb 23> :
  quant = quant - du;

  <bb 24> :
  if (quant >= u0)
    goto <bb 23>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  goto <bb 27>; [INV]

  <bb 26> :
  _5 = *size;
  _6 = _5 + 1;
  *size = _6;
  quant = quant - du;

  <bb 27> :
  if (quant > u1)
    goto <bb 26>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 28> :
  return;

}


