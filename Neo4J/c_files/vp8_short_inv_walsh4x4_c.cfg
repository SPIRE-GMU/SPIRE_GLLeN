
;; Function vp8_short_inv_walsh4x4_c (vp8_short_inv_walsh4x4_c, funcdef_no=0, decl_uid=1944, cgraph_uid=1, symbol_order=0)

;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 3
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 11 }
;; 11 succs { 1 }
void vp8_short_inv_walsh4x4_c (short int * input, short int * mb_dqcoeff)
{
  short int * op;
  short int * ip;
  int d2;
  int c2;
  int b2;
  int a2;
  int d1;
  int c1;
  int b1;
  int a1;
  int i;
  short int output[16];

  <bb 2> :
  ip = input;
  op = &output;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = *ip;
  _2 = (int) _1;
  _3 = ip + 24;
  _4 = *_3;
  _5 = (int) _4;
  a1 = _2 + _5;
  _6 = ip + 8;
  _7 = *_6;
  _8 = (int) _7;
  _9 = ip + 16;
  _10 = *_9;
  _11 = (int) _10;
  b1 = _8 + _11;
  _12 = ip + 8;
  _13 = *_12;
  _14 = (int) _13;
  _15 = ip + 16;
  _16 = *_15;
  _17 = (int) _16;
  c1 = _14 - _17;
  _18 = *ip;
  _19 = (int) _18;
  _20 = ip + 24;
  _21 = *_20;
  _22 = (int) _21;
  d1 = _19 - _22;
  _23 = (unsigned short) a1;
  _24 = (unsigned short) b1;
  _25 = _23 + _24;
  _26 = (short int) _25;
  *op = _26;
  _27 = (unsigned short) c1;
  _28 = (unsigned short) d1;
  _29 = _27 + _28;
  _30 = op + 8;
  _31 = (short int) _29;
  *_30 = _31;
  _32 = (unsigned short) a1;
  _33 = (unsigned short) b1;
  _34 = _32 - _33;
  _35 = op + 16;
  _36 = (short int) _34;
  *_35 = _36;
  _37 = (unsigned short) d1;
  _38 = (unsigned short) c1;
  _39 = _37 - _38;
  _40 = op + 24;
  _41 = (short int) _39;
  *_40 = _41;
  ip = ip + 2;
  op = op + 2;
  i = i + 1;

  <bb 4> :
  if (i <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  ip = &output;
  op = &output;
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _42 = *ip;
  _43 = (int) _42;
  _44 = ip + 6;
  _45 = *_44;
  _46 = (int) _45;
  a1 = _43 + _46;
  _47 = ip + 2;
  _48 = *_47;
  _49 = (int) _48;
  _50 = ip + 4;
  _51 = *_50;
  _52 = (int) _51;
  b1 = _49 + _52;
  _53 = ip + 2;
  _54 = *_53;
  _55 = (int) _54;
  _56 = ip + 4;
  _57 = *_56;
  _58 = (int) _57;
  c1 = _55 - _58;
  _59 = *ip;
  _60 = (int) _59;
  _61 = ip + 6;
  _62 = *_61;
  _63 = (int) _62;
  d1 = _60 - _63;
  a2 = a1 + b1;
  b2 = c1 + d1;
  c2 = a1 - b1;
  d2 = d1 - c1;
  _64 = a2 + 3;
  _65 = _64 >> 3;
  _66 = (short int) _65;
  *op = _66;
  _67 = b2 + 3;
  _68 = _67 >> 3;
  _69 = op + 2;
  _70 = (short int) _68;
  *_69 = _70;
  _71 = c2 + 3;
  _72 = _71 >> 3;
  _73 = op + 4;
  _74 = (short int) _72;
  *_73 = _74;
  _75 = d2 + 3;
  _76 = _75 >> 3;
  _77 = op + 6;
  _78 = (short int) _76;
  *_77 = _78;
  ip = ip + 8;
  op = op + 8;
  i = i + 1;

  <bb 7> :
  if (i <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  i = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _79 = i * 16;
  _80 = (long unsigned int) _79;
  _81 = _80 * 2;
  _82 = mb_dqcoeff + _81;
  _83 = output[i];
  *_82 = _83;
  i = i + 1;

  <bb 10> :
  if (i <= 15)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  output = {CLOBBER};
  return;

}


