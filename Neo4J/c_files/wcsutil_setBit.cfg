
;; Function wcsutil_setBit (wcsutil_setBit, funcdef_no=0, decl_uid=1946, cgraph_uid=1, symbol_order=0)

Removing basic block 9
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 2
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 10 11
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 14 }
;; 5 succs { 6 9 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 14 }
;; 9 succs { 13 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 }
;; 13 succs { 10 14 }
;; 14 succs { 1 }
void wcsutil_setBit (int nelem, const int * sel, int bits, int * array)
{
  int * arrp;
  int * arrp;

  <bb 2> :
  if (bits == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (nelem <= 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 5> :
  if (sel == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  arrp = array;
  goto <bb 8>; [INV]

  <bb 7> :
  _1 = *arrp;
  _2 = bits | _1;
  *arrp = _2;
  arrp = arrp + 4;

  <bb 8> :
  _3 = (long unsigned int) nelem;
  _4 = _3 * 4;
  _5 = array + _4;
  if (arrp < _5)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  arrp = array;
  goto <bb 13>; [INV]

  <bb 10> :
  sel.0_6 = sel;
  sel = sel.0_6 + 4;
  _7 = *sel.0_6;
  if (_7 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _8 = *arrp;
  _9 = bits | _8;
  *arrp = _9;

  <bb 12> :
  arrp = arrp + 4;

  <bb 13> :
  _10 = (long unsigned int) nelem;
  _11 = _10 * 4;
  _12 = array + _11;
  if (arrp < _12)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
<L14>:
  return;

}


