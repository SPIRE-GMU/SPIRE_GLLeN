
;; Function WeightedLinefit (WeightedLinefit, funcdef_no=0, decl_uid=1948, cgraph_uid=1, symbol_order=0)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
void WeightedLinefit (float * x, float * y, float * var, int N, float * ret_m, float * ret_b)
{
  double b;
  double m;
  double delta;
  double sxy;
  double sxx;
  double sy;
  double sx;
  double s;
  int i;

  <bb 2> :
  sxy = 0.0;
  sxx = sxy;
  sy = sxx;
  sx = sy;
  s = sx;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (long unsigned int) i;
  _2 = _1 * 4;
  _3 = var + _2;
  _4 = *_3;
  _5 = (double) _4;
  _6 = 1.0e+0 / _5;
  s = s + _6;
  _7 = (long unsigned int) i;
  _8 = _7 * 4;
  _9 = x + _8;
  _10 = *_9;
  _11 = (long unsigned int) i;
  _12 = _11 * 4;
  _13 = var + _12;
  _14 = *_13;
  _15 = _10 / _14;
  _16 = (double) _15;
  sx = sx + _16;
  _17 = (long unsigned int) i;
  _18 = _17 * 4;
  _19 = y + _18;
  _20 = *_19;
  _21 = (long unsigned int) i;
  _22 = _21 * 4;
  _23 = var + _22;
  _24 = *_23;
  _25 = _20 / _24;
  _26 = (double) _25;
  sy = sy + _26;
  _27 = (long unsigned int) i;
  _28 = _27 * 4;
  _29 = x + _28;
  _30 = *_29;
  _31 = (long unsigned int) i;
  _32 = _31 * 4;
  _33 = x + _32;
  _34 = *_33;
  _35 = _30 * _34;
  _36 = (long unsigned int) i;
  _37 = _36 * 4;
  _38 = var + _37;
  _39 = *_38;
  _40 = _35 / _39;
  _41 = (double) _40;
  sxx = sxx + _41;
  _42 = (long unsigned int) i;
  _43 = _42 * 4;
  _44 = x + _43;
  _45 = *_44;
  _46 = (long unsigned int) i;
  _47 = _46 * 4;
  _48 = y + _47;
  _49 = *_48;
  _50 = _45 * _49;
  _51 = (long unsigned int) i;
  _52 = _51 * 4;
  _53 = var + _52;
  _54 = *_53;
  _55 = _50 / _54;
  _56 = (double) _55;
  sxy = sxy + _56;
  i = i + 1;

  <bb 4> :
  if (i < N)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _57 = s * sxx;
  _58 = sx * sx;
  delta = _57 - _58;
  _59 = sxx * sy;
  _60 = sx * sxy;
  _61 = _59 - _60;
  b = _61 / delta;
  _62 = s * sxy;
  _63 = sx * sy;
  _64 = _62 - _63;
  m = _64 / delta;
  _65 = (float) m;
  *ret_m = _65;
  _66 = (float) b;
  *ret_b = _66;
  return;

}


